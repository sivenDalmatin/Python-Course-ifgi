# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MuensterCityDistrictToolsDialog
                                 A QGIS plugin
 This plugin gives you information about the selected city district of Muenster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-10
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Martin Kriger
        email                : m.kriger@uni-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtWidgets import QMessageBox
from qgis.utils import iface
from qgis.core import QgsProject

from .secondDialog import Ui_DistrictProfileWindow
from .thirdDialog import Ui_ExportWindow
from .pdfprofilelogic import createCityDistrictProfilePDF

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Muenster_City_District_Tools_dialog_base.ui'))


class MuensterCityDistrictToolsDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MuensterCityDistrictToolsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def openSecondDialog(self):
        def createProfile(self, features):
            def calculateArea(self, selected_dist):
                geom = selected_dist.geometry()
                return geom.area() / 1000000

            def countFeaturesInDistrict(self, selected_dist, countedLayer):
                number_of_features = 0
                for feature in countedLayer.getFeatures():
                    if feature.geometry().within(selected_dist.geometry()):
                        number_of_features += 1
                return number_of_features   

            #get layers and validate them being there
            try:
                parcels = QgsProject.instance().mapLayersByName("Muenster_Parcels")[0]
                schools = QgsProject.instance().mapLayersByName("Schools")[0]
                pools = QgsProject.instance().mapLayersByName("public_swimming_pools")[0]
                housenumbers = QgsProject.instance().mapLayersByName("House_Numbers")[0]
            except IndexError:
                QMessageBox.warning(self, "Layer Missing", "One or more required layers are not found")
                return None

            for f in features:
                #get name of district and parent distirct
                district_name = f['Name']
                parentDistrict_name = f['P_District']

                #calculate areo of district
                area = calculateArea(self, f)

                #counts the respective amount of * in the district
                numberOfParcels = countFeaturesInDistrict(self, f, parcels)
                numberOfSchools = countFeaturesInDistrict(self, f, schools)
                numberOfPools = countFeaturesInDistrict(self, f, pools)
                numberOfHouseholds = countFeaturesInDistrict(self, f, housenumbers)

            attributeList = {
                'district_name': district_name,
                'parentDistrict_name': parentDistrict_name,
                'area': area,
                'numberOfHouseholds': numberOfHouseholds,
                'numberOfParcels': numberOfParcels,
                'numberOfSchools': numberOfSchools,
                'numberOfPools': numberOfPools
            }
            return attributeList

        #get selected feature district
        parent = iface.mainWindow() 
        layer = iface.activeLayer()
        features = layer.selectedFeatures()

        if len(features) == 0:
            QMessageBox.warning(parent, "No district", "Please check that one district is selected")
        elif len(features) > 1:
            QMessageBox.warning(parent, "More than one districts", "Please check that only one district is selected")
        else:
            secondDialog = QtWidgets.QDialog()
            ui = Ui_DistrictProfileWindow()
            ui.setupUi(secondDialog)
            ui.OkButtonInformation.clicked.connect(secondDialog.accept)

            print(self)

            infoList = createProfile(self, features)
            
            if infoList:
                ui.InformationText.setText(
                        f"This is the City District Profile of {infoList['district_name']}. {infoList['district_name']} has a size of {infoList['area']} km^2 and is within the parent district {infoList['parentDistrict_name']}."
                        f"There are {infoList['numberOfHouseholds']} households, {infoList['numberOfParcels']} parcels, {infoList['numberOfSchools']} schools, "
                        f"and {infoList['numberOfPools']} pools in the district"
                    )

                secondDialog.exec_()

            #logic for displaying information

    def openThirdDialog(self):

        parent = iface.mainWindow() 
        layer = iface.activeLayer()
        features = layer.selectedFeatures()

        if len(features) == 0:
            QMessageBox.warning(parent, "No district", "Please check that one district is selected")
        elif len(features) > 1:
            QMessageBox.warning(parent, "More than one districts", "Please check that only one district is selected")
        else:
            thirdDialog = QtWidgets.QDialog()
            ui = Ui_ExportWindow()
            ui.setupUi(thirdDialog)
            #Aufrufen der Funktion zum Erstellen der pdf
            ui.pdfExportButton.clicked.connect(createCityDistrictProfilePDF.processAlgorithm)
            ui.csvExportButton.clicked.connect(Ui_ExportWindow.createCSV)
            ui.okButtonExport.clicked.connect(thirdDialog.accept)
            thirdDialog.exec_()








        

        


    